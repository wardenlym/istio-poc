apiVersion: v1
kind: Service
metadata:
  name: golang-app-data-svc
  labels:
    app: golang-app-data
    service: golang-app-data
spec:
  ports:
  - port: 8080
    name: http
  selector:
    app: golang-app-data
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: golang-app-data-cm
data:
  config_value1: "42"            # 类属性键；每一个键都映射到一个简单的值
  config_value2: "foo"
  config-data.json: |            # 类文件键, 内容方便作为文件（支持换行等）
    {
      "key1": "value1",
      "key2": "value2"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: golang-app-data-v1
  labels:
    app: golang-app-data
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: golang-app-data
      version: v1
  template:
    metadata:
      labels:
        app: golang-app-data
        version: v1
    spec:
      containers:
      - name: golang-app-data
        image: wardenlym/golang-app-data:v1
        imagePullPolicy: IfNotPresent
        env:
          - name: CONFIG_VALUE1          # 请注意这里是要注入的环境变量名，可自定义
            valueFrom:
              configMapKeyRef:
                name: golang-app-data-cm # 这个值为 ConfigMap name
                key: config_value1       # 需要取值的键
          - name: CONFIG_VALUE2
            valueFrom:
              configMapKeyRef:
                name: golang-app-data-cm
                key: config_value2
        ports:
        - containerPort: 8080
        securityContext:
          runAsUser: 1000
        volumeMounts:
        - name: data-from-configmap
          mountPath: "/app/config"         # 映射在容器中的挂载目录
          readOnly: true                   # 可以设置挂载后为只读文件
      volumes:
        - name: data-from-configmap
          configMap:
            name: golang-app-data-cm       # config map 名称
            items:
            - key: config-data.json        # config map中的key名称
              path: config-data.json       # 映射后的文件名
---