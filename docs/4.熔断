istio 熔断测试


Istio中的熔断
Istio的 熔断 可以在 流量策略 中配置。Istio的 自定义资源Destination Rule里，TrafficPolicy字段下有两个和熔断相关的配置： ConnectionPoolSettings 和 OutlierDetection。

ConnectionPoolSettings可以为服务配置连接的数量。OutlierDetection用来控制从负载均衡池中剔除不健康的实例。

例如，ConnectionPoolSettings控制请求的最大数量，挂起请求，重试或者超时；OutlierDetection 设置服务被从连接池剔除时发生错误的请求数，可以设置最小逐出时间和最大逐出百分比。有关完整的字段列表，请参考文档.






https://www.servicemesher.com/istio-handbook/concepts/traffic-control.html
除了最核心的路由和流量转移功能外，Istio 还提供了一定的弹性功能，目前支持超时、重试和熔断。简单来说，超时就是设置一个等待时间，当上游服务的响应时间超过这个时间上限，就不再等待直接返回，就是所谓的快速失败。超时主要的目的是控制故障的范围，避免故障进行扩散。重试一般是用来解决网络抖动时通信失败的问题。因为网络的原因，或者上游服务临时出现问题时，可以通过重试来提高系统的可用性。在 Istio 里添加超时和重试都非常简单，只需要在路由配置里添加 timeout 和 retry 这两个关键字就可以实现。

另外一个重要的弹性功能是熔断，它是一种非常有用的过载保护手段，可以避免服务的级联失败。熔断一共有三个状态，当上游服务可以返回正常时，熔断开关处于关闭状态；一旦失败的请求数超过了失败计数器设定的上限，就切换到打开状态，让服务快速失败；熔断还有一个半开状态，通过一个超时时钟，在一定时间后切换到半开状态，让请求尝试去访问上游服务，看看服务是否已经恢复正常。如果服务恢复就关闭熔断，否则再次切换为打开状态。Istio 里面的熔断需要在自定义资源 DestinationRule 的 TrafficPolicy 里进行设置。

https://jimmysong.io/istio-handbook/config/networking/

https://jimmysong.io/istio-handbook/concepts/traffic-management.html
所谓流量管理是指：

控制服务之间的路由：通过在 VirtualService 中的规则条件匹配来设置路由，可以在服务间拆分流量。
控制路由上流量的行为：设定好路由之后，就可以在路由上指定超时和重试机制，例如超时时间、重试次数等；做错误注入、设置断路器等。可以由 VirtualService 和 DestinationRule 共同完成。
显式地向网格中注册服务：显示地引入 Service Mesh 内部或外部的服务，纳入服务网格管理。由 ServiceEntry 实现。
控制网格边缘的南北向流量：为了管理进入 Istio service mesh 的南北向入口流量，需要创建 Gateway 对象并与 VirtualService 绑定。

下面将带您了解 Istio 流量管理相关的基础概念与配置示例。

VirtualService 在 Istio 服务网格中定义路由规则，控制流量路由到服务上的各种行为。
DestinationRule 是 VirtualService 路由生效后，配置应用与请求的策略集。
ServiceEntry 通常用于在 Istio 服务网格之外启用的服务请求。
Gateway 为 HTTP/TCP 流量配置负载均衡器，最常见的是在网格边缘的操作，以启用应用程序的入口流量。
EnvoyFilter 描述了针对代理服务的过滤器，用来定制由 Istio Pilot 生成的代理配置。一定要谨慎使用此功能。错误的配置内容一旦完成传播，可能会令整个服务网格陷入瘫痪状态。这一配置是用于对 Istio 网络系统内部实现进行变更的。


https://www.servicemesher.com/istio-handbook/practice/circuit-breaking.html

loadBalancer	LoadBalancerSettings	
控制负载平衡器算法的设置。

不
connectionPool	ConnectionPoolSettings	
控制与上游服务的连接量的设置

不
https://istio.io/latest/zh/docs/reference/config/networking/destination-rule/#OutlierDetection
outlierDetection	OutlierDetection	
控制从负载平衡池中逐出不健康主机的设置
consecutiveErrors	int32	
主机从连接池中弹出之前的错误数。默认为 5。当通过 HTTP 访问上游主机时，502、503 或 504 返回码被视为错误。当通过不透明的 TCP 连接访问上游主机时，连接超时和连接错误/失败事件被视为错误。

不
interval	Duration	
喷射扫描分析之间的时间间隔。格式：1h/1m/1s/1ms。必须 >=1 毫秒。默认为 10 秒。

不
baseEjectionTime	Duration	
最短弹射时间。主机将保持被弹出的时间等于最小弹出持续时间与主机被弹出次数的乘积。这种技术允许系统自动增加不健康的上游服务器的弹出周期。格式：1h/1m/1s/1ms。必须 >=1 毫秒。默认为 30 秒。

不
maxEjectionPercent	int32	
上游服务的负载平衡池中可以弹出的主机的最大百分比。默认为 10%。

不
minHealthPercent	int32	
只要关联的负载平衡池在健康模式下至少具有最小健康百分比的主机，就会启用异常值检测。当负载平衡池中健康主机的百分比低于此阈值时，将禁用异常检测，并且代理将在池中的所有主机（健康和不健康）之间进行负载平衡。可以通过将阈值设置为 0% 来禁用该阈值。默认值为 0%，因为它通常不适用于每个服务的 pod 很少的 k8s 环境。
不
tls	TLSSettings	
与上游服务连接的 TLS 相关设置。

不
portLevelSettings	PortTrafficPolicy[]	
特定于各个端口的流量策略。请注意，端口级别设置将覆盖目标级别设置。在目标级别指定的流量设置在被端口级别设置覆盖时将不会被继承，即默认值将应用于端口级别流量策略中省略的字段。

不


ConnectionPoolSettings

ConnectionPoolSettings.HTTPSettings
适用于 HTTP1.1/HTTP2/GRPC 连接的设置。

场地	类型	描述	必需的
http1MaxPendingRequests	int32	
对目标的最大挂起 HTTP 请求数。默认 2^32-1。

不
http2MaxRequests	int32	
对后端的最大请求数。默认 2^32-1。

不
maxRequestsPerConnection	int32	
每个连接到后端的最大请求数。将此参数设置为 1 将禁用保持活动。默认为 0，表示“无限制”，最大为 2^29。

不
maxRetries	int32	
在给定时间可以对集群中的所有主机进行的最大重试次数。默认为 2^32-1。

不
idleTimeout	Duration	
上游连接池连接的空闲超时。空闲超时定义为没有活动请求的时间段。如果未设置，则默认为 1 小时。当达到空闲超时时，连接将被关闭。请注意，基于请求的超时意味着 HTTP/2 PING 不会使连接保持活动状态。适用于 HTTP1.1 和 HTTP2 连接。

不
h2UpgradePolicy	H2UpgradePolicy	
指定是否应将关联目标的 http1.1 连接升级到 http2。

不


异常值检测
outlierDetection
一种断路器实现，用于跟踪上游服务中每个单独主机的状态。适用于 HTTP 和 TCP 服务。对于 HTTP 服务，对于 API 调用持续返回 5xx 错误的主机将在预定义的时间段内从池中弹出。对于 TCP 服务，在测量连续错误指标时，与给定主机的连接超时或连接失败将计为错误。有关 更多详细信息，请参阅 Envoy 的异常值检测。

以下规则将连接池大小设置为 100 个 HTTP1 连接，其中与“reviews”服务的请求/连接不超过 10 个。此外，它设置了 1000 个并发 HTTP2 请求的限制，并将上游主机配置为每 5 分钟扫描一次，以便任何连续 7 次失败并出现 502、503 或 504 错误代码的主机将被弹出 15 分钟。




